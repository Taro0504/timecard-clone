---
description: このプロジェクトの基本的なルールを定義します。
globs: 
alwaysApply: false
---
---
description: this file explains best practices. please always refer to this file.
globs: *
alwaysApply: true
---

# project-rules.mdc
- このファイルが読み込まれたら必ず「project-rules.mdcを読み込みました！」と作業着手前にユーザーに必ず伝えてください。


## 基本原則
以下のルールを遵守して下さい。

### 1. コミュニケーション
- ユーザーとのコミュニケーションは常に日本語でお願いします。

### 2. 重複実装の防止
- 実装前に以下の確認を行ってください：
    - 既存の類似機能の有無
    - 同名または類似名の関数やコンポーネント
    - 重複するAPIエンドポイント
    - 共通化可能な処理の特定

### 3. 単一責任の原則
- 関数が長くなりすぎた場合は、小さな関数に分割して下さい。
- ファイルが大きくなりすぎた場合は、小さなファイルに分割して下さい。

### 4. 参照禁止ファイル
- .envファイルの作成・読込・編集・削除は厳禁です。ユーザーに作業を促して下さい。
- .envファイルはプロジェクトルートに配置しています。

--

## プロジェクト構成
本プロジェクトは、
pnpm workspace と turbo を活用したモノレポ構成を採用し、フロントエンドとバックエンドを統一的に管理・開発しています。
フロントエンドには Next.js（App Router）、バックエンドには FastAPI を使用し、API通信の型整合性のために OpenAPIベースの型共有を行っています。

### ルートディレクトリ構造

```
/
├── frontend/                  # Next.js フロントエンドアプリケーション
│   └── types/api/            # OpenAPIから自動生成されたAPI型定義
├── backend/                   # FastAPI バックエンドアプリケーション
│   └── app/                  # ルーティング、モデル、サービス層など
├── docker/                   # Dockerfileや環境構築関連ファイル
├── docker-compose.yml        # 開発用コンテナ構成
├── turbo.json                # タスク依存やキャッシュ管理設定
├── pnpm-workspace.yaml       # ワークスペース設定
├── .env                      # 共通環境変数
└── ...（設定ファイル類）
```


## プログラミング言語
本プロジェクトは、バックエンドの実装もフロントエンドの実装も、TypeScriptを使用しています。基本、いかなる場合でもTypeScriptを使用して実装してください。

### 1. 型の使用

- 明示的な型アノテーションを使用
- `any`型は避け、代わりに`unknown`使用
- 複雑な型は`interface`/`type`で定義
- 配列型は`T[]`形式を優先
- 再利用可能な型は個別ファイルにエクスポート

### 2. インターフェース/型エイリアス

- 拡張必要時は`interface`
- 高度な型操作には`type`
- `I`プレフィックス不使用
- 関連する型は同ファイルにまとめる

### 3. Null/Undefinedの扱い

- オプショナルチェーン`?.`活用
- Nullish合体演算子`??`使用
- 非nullアサーション`!`は避ける
- 早期リターンでネスト削減

### 4. モジュール構成

- 絶対パスは`@/*`エイリアス使用
- 型のみの場合は`import type`
- 名前付きエクスポート優先
- 循環参照を避ける

### 5. エラー処理

- 具体的なエラー型を使用
- キャッチしたエラーに型付け
- 非同期は`try/catch`または`Promise.catch()`

### 6. コード品質

- strict モードを有効に保つ（tsconfig.json）
- 未使用の変数・型は検出し削除（ESLintで補助）
- 型定義の複雑さはパフォーマンスに配慮
- 型定義やロジックにおける循環参照を避ける




## このプロジェクトで使用している技術スタック

### コア技術

1. **Node.js**

   - バージョン: 20.18.0（nvmでバージョン管理）
   - JavaScriptランタイム環境
   - フロントエンド開発基盤として使用

2. **TypeScript**

   - バージョン: 5.5.4
   - 静的型付け
   - 型推論と型チェック
   - インターフェースと型定義
   - フロントエンド全体で使用

3. **Next.js**

   - バージョン: 15.3.2
   - React フレームワーク
   - SSR / SSG / クライアント・サーバーコンポーネントの統合
   - App Router の活用
   - ページとルーティングの統合管理

4. **React**

   - バージョン: 19.1.0
   - コンポーネントベースのUIライブラリ
   - フックの活用（useState, useEffect など）
   - サーバーコンポーネントとクライアントコンポーネント

5. **FastAPI**

   - バージョン: 0.111.0
   - Python製の非同期Webフレームワーク
   - 自動OpenAPI生成、Pydanticによるスキーマ管理
   - バックエンドAPIの構築に使用

6. **SQLAlchemy**

   - バージョン: 5.19.0
   - ORM（Object Relational Mapper）
   - Alembicでマイグレーションも対応
   - 型安全なデータベースアクセス
   - PostgreSQLとの統合

7. **OpenAPI / Swagger**

   - FastAPI によって自動生成
   - API仕様のドキュメント＆クライアントコードの基盤
   - フロントエンドへの型共有に使用

8. **pnpm workspace**
   - モノレポのパッケージ管理
   - frontend, backend 間で依存を分離・管理

8. **turbo**
   - モノレポ用のビルド・タスク管理ツール
   - 差分ビルドやCI高速化のために使用

### フロントエンド技術

1. **TailwindCSS**

   - バージョン: 4.1
   - ユーティリティファーストCSSフレームワーク
   - カスタマイズ可能なデザインシステム

2. **shadcn/ui**

   - アクセシブルなUIコンポーネント
   - ヘッドレスコンポーネントライブラリ
   - スタイリングの自由度

3. **React Hook Form**

   - バージョン: 7.53.0
   - パフォーマンスに優れたフォーム管理
   - バリデーション連携

4. **Zod**

   - バージョン: 3.23.8
   - ランタイムスキーマ定義と検証
   - TypeScriptとの型推論に連携

5. **TanStack Query**

   - バージョン: 5.56.2
   - データフェッチングとキャッシュ管理
   - 非同期状態管理

6. **TanStack Table**
   - バージョン: 8.19.3
   - 高度なテーブル管理
   - ソート、フィルタリング、ページネーション

### バックエンド技術

1. **Python**

   - バージョン: 3.11.x
   - FastAPI・SQLAlchemy・Pydanticなどに使用
   - 非同期開発（async def）と強力な型サポート

1. **PostgreSQL**

   - リレーショナルデータベース
   - 強力なクエリ機能
   - トランザクション処理

2. **Pydantic**

   - バージョン: 2.x
   - バリデーションとスキーマ定義に使用
   - FastAPIの型安全なリクエスト/レスポンス処理に活用

### 開発ツール

1. **Docker / Docker Compose**

   - バージョン管理された開発環境構築
   - FastAPI + PostgreSQL + Next.js を統一的に起動

2. **ESLint**

   - バージョン: 9.6.0
   - コード品質チェック
   - 自動修正機能

3. **Prettier**

   - バージョン: 3.3.2
   - コードフォーマッター
   - 一貫したコードスタイル

4. **openapi-generator-cli**

   - OpenAPI スキーマから TypeScript 型を自動生成
   - typescript-fetch によりAPIクライアント作成

5. **Vitest / Playwright / Pytest**

   - フロントエンド：Vitest（ユニット）、Playwright（E2E）
   - バックエンド：Pytest（ユニット・APIテスト）